#!/usr/bin/env python
# coding=utf-8
#        中文词频分词算法练习
#        C19<classone2010@gmail.com>
#        算法源自http://www.matrix67.com/blog/archives/5044

import collections;Counter = collections.Counter

def gen_possible_words(origin_str,maxlength=4):
        maxlength = maxlength+1
        unique_slices = []
        slices = [[origin_str[i:i+j] for i in range(1,len(origin_str)-j+1)] for j in range(1,maxlength)]
        for aslice in slices:
                unique_slices.extend(list(set(aslice)))
        return slices,unique_slices

def freq_count(slices, unique_slices, total_length):
        counted_slices = Counter('')
        for aslice in slices:
                counted_slices.update(Counter(aslice))
        words = {aslice:{'freq':(counted_slices[aslice]*len(aslice)/total_length)} for aslice in unique_slices}
        return words

def cutter(tmp):
        return [(tmp[:i],tmp[i:]) for i in range(1,len(tmp))]

def poly_count(words):
        for word in words:
                word = word.update({'poly':_poly_count(word)})

def _poly_count(aslice, words):
        m = max([words[s1]['freq']*words[s2]['freq'] for s1,s2 in cutter(aslice)])
        return words[aslice]['freq']/m if m > 0 else 10**16
        
ori = open('material.txt','r').read()
total_length= len(ori)
slices,unique_slices = gen_possible_words(ori)
words = freq_count(slices, unique_slices, total_length)
poly_count(words)



